class Post:
    def __init__(self, master , title, category, file_image, description, name):
        self.master = master
        self.master.geometry("1000x1000") 
        self.title = title
        self.category = category
        self.file_image = file_image
        self.imagem_pil = Image.open(self.file_image)
        self.description = description
        self.name = name

        self.ttl = Label(self.master, text=self.title, font=("Helvetica", 16))
        self.ttl.place(relx=0.5, rely=0, anchor="n")

        self.cty = Label(self.master, text="Categoria: "+self.category, font=("Helvetica", 15))
        self.cty.place(relx=0, rely=0, anchor="nw")

        self.nm = Label(self.master, text="Autor: "+self.name, font=("Helvetica", 15))
        self.nm.place(relx=1, rely=0, anchor="ne")

        self.dsc = Label(self.master, text=self.description, wraplength=400, justify="center", font=("Helvetica", 10))
        self.dsc.place(relx=0.5, rely=1, anchor="s")

        self.open_image()

        self.update_window_size()


    def update_window_size(self):
        width = self.imagem_pil.width

        height = self.ttl.winfo_reqwidth() + \
                 self.cty.winfo_reqwidth() + \
                 self.dsc.winfo_reqwidth() + \
                 self.nm.winfo_reqwidth()  + 50

        # Define o tamanho da janela
        self.master.geometry(f"{width}x{height}")
        return width
    def open_image(self):

        self.imagem_tk = ImageTk.PhotoImage(self.imagem_pil)
        self.img = Label(self.master, image=self.imagem_tk)
        self.img.image = self.imagem_tk
        self.img.place(relx=0.5,rely =0.45, anchor = "c")


    def import_image(self):
        file_path = filedialog.askopenfilename()

        hunter = file_path.find("HunterxHunter")

        if hunter != -1:
            relative_path = file_path[hunter:]
            relative_path = os.path.normpath(relative_path)
            print(relative_path)
            self.image_object = PhotoImage(file=r"{}".format(relative_path))




def button_generate(self):
        for report in self.list_reports:
            self.button_frame = Frame(self.master)
            self.button_frame.pack()

            self.button = Button(self.button_frame, text = report.title)
            self.button["command"] = self.find_title_button
            self.button.pack(side = "left")
    
    def find_title_button(self):
        for report in self.list_reports:
            for widget in self.master.winfo_children():
                if isinstance(widget, Button) and widget["text"] == report.title:
                    widget["command"] = self.open_report(report.title, report.category, report.description, report.name)



    def open_report(self,title,category,description,name):
        new_window = Toplevel(self.master)
        Report(new_window,title, category, description, name)
